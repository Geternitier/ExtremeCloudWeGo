// Code generated by Kitex v0.6.1. DO NOT EDIT.

package studentservice

import (
	exvs "Exvs/servers/kitex_gen/Exvs"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return studentServiceServiceInfo
}

var studentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StudentService"
	handlerType := (*exvs.StudentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newStudentServiceRegisterArgs, newStudentServiceRegisterResult, false),
		"Query":    kitex.NewMethodInfo(queryHandler, newStudentServiceQueryArgs, newStudentServiceQueryResult, false),
		"Update":   kitex.NewMethodInfo(updateHandler, newStudentServiceUpdateArgs, newStudentServiceUpdateResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "exvs",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*exvs.StudentServiceRegisterArgs)
	realResult := result.(*exvs.StudentServiceRegisterResult)
	success, err := handler.(exvs.StudentService).Register(ctx, realArg.Info)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceRegisterArgs() interface{} {
	return exvs.NewStudentServiceRegisterArgs()
}

func newStudentServiceRegisterResult() interface{} {
	return exvs.NewStudentServiceRegisterResult()
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*exvs.StudentServiceQueryArgs)
	realResult := result.(*exvs.StudentServiceQueryResult)
	success, err := handler.(exvs.StudentService).Query(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceQueryArgs() interface{} {
	return exvs.NewStudentServiceQueryArgs()
}

func newStudentServiceQueryResult() interface{} {
	return exvs.NewStudentServiceQueryResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*exvs.StudentServiceUpdateArgs)
	realResult := result.(*exvs.StudentServiceUpdateResult)
	success, err := handler.(exvs.StudentService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStudentServiceUpdateArgs() interface{} {
	return exvs.NewStudentServiceUpdateArgs()
}

func newStudentServiceUpdateResult() interface{} {
	return exvs.NewStudentServiceUpdateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, info *exvs.Student) (r *exvs.RegisterResp, err error) {
	var _args exvs.StudentServiceRegisterArgs
	_args.Info = info
	var _result exvs.StudentServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, req *exvs.QueryReq) (r *exvs.Student, err error) {
	var _args exvs.StudentServiceQueryArgs
	_args.Req = req
	var _result exvs.StudentServiceQueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *exvs.UpdateReq) (r *exvs.UpdateResp, err error) {
	var _args exvs.StudentServiceUpdateArgs
	_args.Req = req
	var _result exvs.StudentServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
